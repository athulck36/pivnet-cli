// Code generated by counterfeiter. DO NOT EDIT.
package helmchartreferencefakes

import (
	"sync"

	pivnet "github.com/pivotal-cf/go-pivnet/v3"
	"github.com/pivotal-cf/pivnet-cli/commands/helmchartreference"
)

type FakePivnetClient struct {
	HelmChartReferencesStub        func(productSlug string) ([]pivnet.HelmChartReference, error)
	helmChartReferencesMutex       sync.RWMutex
	helmChartReferencesArgsForCall []struct {
		productSlug string
	}
	helmChartReferencesReturns struct {
		result1 []pivnet.HelmChartReference
		result2 error
	}
	helmChartReferencesReturnsOnCall map[int]struct {
		result1 []pivnet.HelmChartReference
		result2 error
	}
	HelmChartReferencesForReleaseStub        func(productSlug string, releaseID int) ([]pivnet.HelmChartReference, error)
	helmChartReferencesForReleaseMutex       sync.RWMutex
	helmChartReferencesForReleaseArgsForCall []struct {
		productSlug string
		releaseID   int
	}
	helmChartReferencesForReleaseReturns struct {
		result1 []pivnet.HelmChartReference
		result2 error
	}
	helmChartReferencesForReleaseReturnsOnCall map[int]struct {
		result1 []pivnet.HelmChartReference
		result2 error
	}
	HelmChartReferenceStub        func(productSlug string, helmChartReferenceID int) (pivnet.HelmChartReference, error)
	helmChartReferenceMutex       sync.RWMutex
	helmChartReferenceArgsForCall []struct {
		productSlug          string
		helmChartReferenceID int
	}
	helmChartReferenceReturns struct {
		result1 pivnet.HelmChartReference
		result2 error
	}
	helmChartReferenceReturnsOnCall map[int]struct {
		result1 pivnet.HelmChartReference
		result2 error
	}
	HelmChartReferenceForReleaseStub        func(productSlug string, releaseID int, helmChartReferenceID int) (pivnet.HelmChartReference, error)
	helmChartReferenceForReleaseMutex       sync.RWMutex
	helmChartReferenceForReleaseArgsForCall []struct {
		productSlug          string
		releaseID            int
		helmChartReferenceID int
	}
	helmChartReferenceForReleaseReturns struct {
		result1 pivnet.HelmChartReference
		result2 error
	}
	helmChartReferenceForReleaseReturnsOnCall map[int]struct {
		result1 pivnet.HelmChartReference
		result2 error
	}
	ReleaseForVersionStub        func(productSlug string, releaseVersion string) (pivnet.Release, error)
	releaseForVersionMutex       sync.RWMutex
	releaseForVersionArgsForCall []struct {
		productSlug    string
		releaseVersion string
	}
	releaseForVersionReturns struct {
		result1 pivnet.Release
		result2 error
	}
	releaseForVersionReturnsOnCall map[int]struct {
		result1 pivnet.Release
		result2 error
	}
	CreateHelmChartReferenceStub        func(config pivnet.CreateHelmChartReferenceConfig) (pivnet.HelmChartReference, error)
	createHelmChartReferenceMutex       sync.RWMutex
	createHelmChartReferenceArgsForCall []struct {
		config pivnet.CreateHelmChartReferenceConfig
	}
	createHelmChartReferenceReturns struct {
		result1 pivnet.HelmChartReference
		result2 error
	}
	createHelmChartReferenceReturnsOnCall map[int]struct {
		result1 pivnet.HelmChartReference
		result2 error
	}
	DeleteHelmChartReferenceStub        func(productSlug string, releaseID int) (pivnet.HelmChartReference, error)
	deleteHelmChartReferenceMutex       sync.RWMutex
	deleteHelmChartReferenceArgsForCall []struct {
		productSlug string
		releaseID   int
	}
	deleteHelmChartReferenceReturns struct {
		result1 pivnet.HelmChartReference
		result2 error
	}
	deleteHelmChartReferenceReturnsOnCall map[int]struct {
		result1 pivnet.HelmChartReference
		result2 error
	}
	AddHelmChartReferenceToReleaseStub        func(productSlug string, helmChartReferenceID int, releaseID int) error
	addHelmChartReferenceToReleaseMutex       sync.RWMutex
	addHelmChartReferenceToReleaseArgsForCall []struct {
		productSlug          string
		helmChartReferenceID int
		releaseID            int
	}
	addHelmChartReferenceToReleaseReturns struct {
		result1 error
	}
	addHelmChartReferenceToReleaseReturnsOnCall map[int]struct {
		result1 error
	}
	RemoveHelmChartReferenceFromReleaseStub        func(productSlug string, helmChartReferenceID int, releaseID int) error
	removeHelmChartReferenceFromReleaseMutex       sync.RWMutex
	removeHelmChartReferenceFromReleaseArgsForCall []struct {
		productSlug          string
		helmChartReferenceID int
		releaseID            int
	}
	removeHelmChartReferenceFromReleaseReturns struct {
		result1 error
	}
	removeHelmChartReferenceFromReleaseReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateHelmChartReferenceStub        func(productSlug string, helmChartReference pivnet.HelmChartReference) (pivnet.HelmChartReference, error)
	updateHelmChartReferenceMutex       sync.RWMutex
	updateHelmChartReferenceArgsForCall []struct {
		productSlug        string
		helmChartReference pivnet.HelmChartReference
	}
	updateHelmChartReferenceReturns struct {
		result1 pivnet.HelmChartReference
		result2 error
	}
	updateHelmChartReferenceReturnsOnCall map[int]struct {
		result1 pivnet.HelmChartReference
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePivnetClient) HelmChartReferences(productSlug string) ([]pivnet.HelmChartReference, error) {
	fake.helmChartReferencesMutex.Lock()
	ret, specificReturn := fake.helmChartReferencesReturnsOnCall[len(fake.helmChartReferencesArgsForCall)]
	fake.helmChartReferencesArgsForCall = append(fake.helmChartReferencesArgsForCall, struct {
		productSlug string
	}{productSlug})
	fake.recordInvocation("HelmChartReferences", []interface{}{productSlug})
	fake.helmChartReferencesMutex.Unlock()
	if fake.HelmChartReferencesStub != nil {
		return fake.HelmChartReferencesStub(productSlug)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.helmChartReferencesReturns.result1, fake.helmChartReferencesReturns.result2
}

func (fake *FakePivnetClient) HelmChartReferencesCallCount() int {
	fake.helmChartReferencesMutex.RLock()
	defer fake.helmChartReferencesMutex.RUnlock()
	return len(fake.helmChartReferencesArgsForCall)
}

func (fake *FakePivnetClient) HelmChartReferencesArgsForCall(i int) string {
	fake.helmChartReferencesMutex.RLock()
	defer fake.helmChartReferencesMutex.RUnlock()
	return fake.helmChartReferencesArgsForCall[i].productSlug
}

func (fake *FakePivnetClient) HelmChartReferencesReturns(result1 []pivnet.HelmChartReference, result2 error) {
	fake.HelmChartReferencesStub = nil
	fake.helmChartReferencesReturns = struct {
		result1 []pivnet.HelmChartReference
		result2 error
	}{result1, result2}
}

func (fake *FakePivnetClient) HelmChartReferencesReturnsOnCall(i int, result1 []pivnet.HelmChartReference, result2 error) {
	fake.HelmChartReferencesStub = nil
	if fake.helmChartReferencesReturnsOnCall == nil {
		fake.helmChartReferencesReturnsOnCall = make(map[int]struct {
			result1 []pivnet.HelmChartReference
			result2 error
		})
	}
	fake.helmChartReferencesReturnsOnCall[i] = struct {
		result1 []pivnet.HelmChartReference
		result2 error
	}{result1, result2}
}

func (fake *FakePivnetClient) HelmChartReferencesForRelease(productSlug string, releaseID int) ([]pivnet.HelmChartReference, error) {
	fake.helmChartReferencesForReleaseMutex.Lock()
	ret, specificReturn := fake.helmChartReferencesForReleaseReturnsOnCall[len(fake.helmChartReferencesForReleaseArgsForCall)]
	fake.helmChartReferencesForReleaseArgsForCall = append(fake.helmChartReferencesForReleaseArgsForCall, struct {
		productSlug string
		releaseID   int
	}{productSlug, releaseID})
	fake.recordInvocation("HelmChartReferencesForRelease", []interface{}{productSlug, releaseID})
	fake.helmChartReferencesForReleaseMutex.Unlock()
	if fake.HelmChartReferencesForReleaseStub != nil {
		return fake.HelmChartReferencesForReleaseStub(productSlug, releaseID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.helmChartReferencesForReleaseReturns.result1, fake.helmChartReferencesForReleaseReturns.result2
}

func (fake *FakePivnetClient) HelmChartReferencesForReleaseCallCount() int {
	fake.helmChartReferencesForReleaseMutex.RLock()
	defer fake.helmChartReferencesForReleaseMutex.RUnlock()
	return len(fake.helmChartReferencesForReleaseArgsForCall)
}

func (fake *FakePivnetClient) HelmChartReferencesForReleaseArgsForCall(i int) (string, int) {
	fake.helmChartReferencesForReleaseMutex.RLock()
	defer fake.helmChartReferencesForReleaseMutex.RUnlock()
	return fake.helmChartReferencesForReleaseArgsForCall[i].productSlug, fake.helmChartReferencesForReleaseArgsForCall[i].releaseID
}

func (fake *FakePivnetClient) HelmChartReferencesForReleaseReturns(result1 []pivnet.HelmChartReference, result2 error) {
	fake.HelmChartReferencesForReleaseStub = nil
	fake.helmChartReferencesForReleaseReturns = struct {
		result1 []pivnet.HelmChartReference
		result2 error
	}{result1, result2}
}

func (fake *FakePivnetClient) HelmChartReferencesForReleaseReturnsOnCall(i int, result1 []pivnet.HelmChartReference, result2 error) {
	fake.HelmChartReferencesForReleaseStub = nil
	if fake.helmChartReferencesForReleaseReturnsOnCall == nil {
		fake.helmChartReferencesForReleaseReturnsOnCall = make(map[int]struct {
			result1 []pivnet.HelmChartReference
			result2 error
		})
	}
	fake.helmChartReferencesForReleaseReturnsOnCall[i] = struct {
		result1 []pivnet.HelmChartReference
		result2 error
	}{result1, result2}
}

func (fake *FakePivnetClient) HelmChartReference(productSlug string, helmChartReferenceID int) (pivnet.HelmChartReference, error) {
	fake.helmChartReferenceMutex.Lock()
	ret, specificReturn := fake.helmChartReferenceReturnsOnCall[len(fake.helmChartReferenceArgsForCall)]
	fake.helmChartReferenceArgsForCall = append(fake.helmChartReferenceArgsForCall, struct {
		productSlug          string
		helmChartReferenceID int
	}{productSlug, helmChartReferenceID})
	fake.recordInvocation("HelmChartReference", []interface{}{productSlug, helmChartReferenceID})
	fake.helmChartReferenceMutex.Unlock()
	if fake.HelmChartReferenceStub != nil {
		return fake.HelmChartReferenceStub(productSlug, helmChartReferenceID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.helmChartReferenceReturns.result1, fake.helmChartReferenceReturns.result2
}

func (fake *FakePivnetClient) HelmChartReferenceCallCount() int {
	fake.helmChartReferenceMutex.RLock()
	defer fake.helmChartReferenceMutex.RUnlock()
	return len(fake.helmChartReferenceArgsForCall)
}

func (fake *FakePivnetClient) HelmChartReferenceArgsForCall(i int) (string, int) {
	fake.helmChartReferenceMutex.RLock()
	defer fake.helmChartReferenceMutex.RUnlock()
	return fake.helmChartReferenceArgsForCall[i].productSlug, fake.helmChartReferenceArgsForCall[i].helmChartReferenceID
}

func (fake *FakePivnetClient) HelmChartReferenceReturns(result1 pivnet.HelmChartReference, result2 error) {
	fake.HelmChartReferenceStub = nil
	fake.helmChartReferenceReturns = struct {
		result1 pivnet.HelmChartReference
		result2 error
	}{result1, result2}
}

func (fake *FakePivnetClient) HelmChartReferenceReturnsOnCall(i int, result1 pivnet.HelmChartReference, result2 error) {
	fake.HelmChartReferenceStub = nil
	if fake.helmChartReferenceReturnsOnCall == nil {
		fake.helmChartReferenceReturnsOnCall = make(map[int]struct {
			result1 pivnet.HelmChartReference
			result2 error
		})
	}
	fake.helmChartReferenceReturnsOnCall[i] = struct {
		result1 pivnet.HelmChartReference
		result2 error
	}{result1, result2}
}

func (fake *FakePivnetClient) HelmChartReferenceForRelease(productSlug string, releaseID int, helmChartReferenceID int) (pivnet.HelmChartReference, error) {
	fake.helmChartReferenceForReleaseMutex.Lock()
	ret, specificReturn := fake.helmChartReferenceForReleaseReturnsOnCall[len(fake.helmChartReferenceForReleaseArgsForCall)]
	fake.helmChartReferenceForReleaseArgsForCall = append(fake.helmChartReferenceForReleaseArgsForCall, struct {
		productSlug          string
		releaseID            int
		helmChartReferenceID int
	}{productSlug, releaseID, helmChartReferenceID})
	fake.recordInvocation("HelmChartReferenceForRelease", []interface{}{productSlug, releaseID, helmChartReferenceID})
	fake.helmChartReferenceForReleaseMutex.Unlock()
	if fake.HelmChartReferenceForReleaseStub != nil {
		return fake.HelmChartReferenceForReleaseStub(productSlug, releaseID, helmChartReferenceID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.helmChartReferenceForReleaseReturns.result1, fake.helmChartReferenceForReleaseReturns.result2
}

func (fake *FakePivnetClient) HelmChartReferenceForReleaseCallCount() int {
	fake.helmChartReferenceForReleaseMutex.RLock()
	defer fake.helmChartReferenceForReleaseMutex.RUnlock()
	return len(fake.helmChartReferenceForReleaseArgsForCall)
}

func (fake *FakePivnetClient) HelmChartReferenceForReleaseArgsForCall(i int) (string, int, int) {
	fake.helmChartReferenceForReleaseMutex.RLock()
	defer fake.helmChartReferenceForReleaseMutex.RUnlock()
	return fake.helmChartReferenceForReleaseArgsForCall[i].productSlug, fake.helmChartReferenceForReleaseArgsForCall[i].releaseID, fake.helmChartReferenceForReleaseArgsForCall[i].helmChartReferenceID
}

func (fake *FakePivnetClient) HelmChartReferenceForReleaseReturns(result1 pivnet.HelmChartReference, result2 error) {
	fake.HelmChartReferenceForReleaseStub = nil
	fake.helmChartReferenceForReleaseReturns = struct {
		result1 pivnet.HelmChartReference
		result2 error
	}{result1, result2}
}

func (fake *FakePivnetClient) HelmChartReferenceForReleaseReturnsOnCall(i int, result1 pivnet.HelmChartReference, result2 error) {
	fake.HelmChartReferenceForReleaseStub = nil
	if fake.helmChartReferenceForReleaseReturnsOnCall == nil {
		fake.helmChartReferenceForReleaseReturnsOnCall = make(map[int]struct {
			result1 pivnet.HelmChartReference
			result2 error
		})
	}
	fake.helmChartReferenceForReleaseReturnsOnCall[i] = struct {
		result1 pivnet.HelmChartReference
		result2 error
	}{result1, result2}
}

func (fake *FakePivnetClient) ReleaseForVersion(productSlug string, releaseVersion string) (pivnet.Release, error) {
	fake.releaseForVersionMutex.Lock()
	ret, specificReturn := fake.releaseForVersionReturnsOnCall[len(fake.releaseForVersionArgsForCall)]
	fake.releaseForVersionArgsForCall = append(fake.releaseForVersionArgsForCall, struct {
		productSlug    string
		releaseVersion string
	}{productSlug, releaseVersion})
	fake.recordInvocation("ReleaseForVersion", []interface{}{productSlug, releaseVersion})
	fake.releaseForVersionMutex.Unlock()
	if fake.ReleaseForVersionStub != nil {
		return fake.ReleaseForVersionStub(productSlug, releaseVersion)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.releaseForVersionReturns.result1, fake.releaseForVersionReturns.result2
}

func (fake *FakePivnetClient) ReleaseForVersionCallCount() int {
	fake.releaseForVersionMutex.RLock()
	defer fake.releaseForVersionMutex.RUnlock()
	return len(fake.releaseForVersionArgsForCall)
}

func (fake *FakePivnetClient) ReleaseForVersionArgsForCall(i int) (string, string) {
	fake.releaseForVersionMutex.RLock()
	defer fake.releaseForVersionMutex.RUnlock()
	return fake.releaseForVersionArgsForCall[i].productSlug, fake.releaseForVersionArgsForCall[i].releaseVersion
}

func (fake *FakePivnetClient) ReleaseForVersionReturns(result1 pivnet.Release, result2 error) {
	fake.ReleaseForVersionStub = nil
	fake.releaseForVersionReturns = struct {
		result1 pivnet.Release
		result2 error
	}{result1, result2}
}

func (fake *FakePivnetClient) ReleaseForVersionReturnsOnCall(i int, result1 pivnet.Release, result2 error) {
	fake.ReleaseForVersionStub = nil
	if fake.releaseForVersionReturnsOnCall == nil {
		fake.releaseForVersionReturnsOnCall = make(map[int]struct {
			result1 pivnet.Release
			result2 error
		})
	}
	fake.releaseForVersionReturnsOnCall[i] = struct {
		result1 pivnet.Release
		result2 error
	}{result1, result2}
}

func (fake *FakePivnetClient) CreateHelmChartReference(config pivnet.CreateHelmChartReferenceConfig) (pivnet.HelmChartReference, error) {
	fake.createHelmChartReferenceMutex.Lock()
	ret, specificReturn := fake.createHelmChartReferenceReturnsOnCall[len(fake.createHelmChartReferenceArgsForCall)]
	fake.createHelmChartReferenceArgsForCall = append(fake.createHelmChartReferenceArgsForCall, struct {
		config pivnet.CreateHelmChartReferenceConfig
	}{config})
	fake.recordInvocation("CreateHelmChartReference", []interface{}{config})
	fake.createHelmChartReferenceMutex.Unlock()
	if fake.CreateHelmChartReferenceStub != nil {
		return fake.CreateHelmChartReferenceStub(config)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createHelmChartReferenceReturns.result1, fake.createHelmChartReferenceReturns.result2
}

func (fake *FakePivnetClient) CreateHelmChartReferenceCallCount() int {
	fake.createHelmChartReferenceMutex.RLock()
	defer fake.createHelmChartReferenceMutex.RUnlock()
	return len(fake.createHelmChartReferenceArgsForCall)
}

func (fake *FakePivnetClient) CreateHelmChartReferenceArgsForCall(i int) pivnet.CreateHelmChartReferenceConfig {
	fake.createHelmChartReferenceMutex.RLock()
	defer fake.createHelmChartReferenceMutex.RUnlock()
	return fake.createHelmChartReferenceArgsForCall[i].config
}

func (fake *FakePivnetClient) CreateHelmChartReferenceReturns(result1 pivnet.HelmChartReference, result2 error) {
	fake.CreateHelmChartReferenceStub = nil
	fake.createHelmChartReferenceReturns = struct {
		result1 pivnet.HelmChartReference
		result2 error
	}{result1, result2}
}

func (fake *FakePivnetClient) CreateHelmChartReferenceReturnsOnCall(i int, result1 pivnet.HelmChartReference, result2 error) {
	fake.CreateHelmChartReferenceStub = nil
	if fake.createHelmChartReferenceReturnsOnCall == nil {
		fake.createHelmChartReferenceReturnsOnCall = make(map[int]struct {
			result1 pivnet.HelmChartReference
			result2 error
		})
	}
	fake.createHelmChartReferenceReturnsOnCall[i] = struct {
		result1 pivnet.HelmChartReference
		result2 error
	}{result1, result2}
}

func (fake *FakePivnetClient) DeleteHelmChartReference(productSlug string, releaseID int) (pivnet.HelmChartReference, error) {
	fake.deleteHelmChartReferenceMutex.Lock()
	ret, specificReturn := fake.deleteHelmChartReferenceReturnsOnCall[len(fake.deleteHelmChartReferenceArgsForCall)]
	fake.deleteHelmChartReferenceArgsForCall = append(fake.deleteHelmChartReferenceArgsForCall, struct {
		productSlug string
		releaseID   int
	}{productSlug, releaseID})
	fake.recordInvocation("DeleteHelmChartReference", []interface{}{productSlug, releaseID})
	fake.deleteHelmChartReferenceMutex.Unlock()
	if fake.DeleteHelmChartReferenceStub != nil {
		return fake.DeleteHelmChartReferenceStub(productSlug, releaseID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteHelmChartReferenceReturns.result1, fake.deleteHelmChartReferenceReturns.result2
}

func (fake *FakePivnetClient) DeleteHelmChartReferenceCallCount() int {
	fake.deleteHelmChartReferenceMutex.RLock()
	defer fake.deleteHelmChartReferenceMutex.RUnlock()
	return len(fake.deleteHelmChartReferenceArgsForCall)
}

func (fake *FakePivnetClient) DeleteHelmChartReferenceArgsForCall(i int) (string, int) {
	fake.deleteHelmChartReferenceMutex.RLock()
	defer fake.deleteHelmChartReferenceMutex.RUnlock()
	return fake.deleteHelmChartReferenceArgsForCall[i].productSlug, fake.deleteHelmChartReferenceArgsForCall[i].releaseID
}

func (fake *FakePivnetClient) DeleteHelmChartReferenceReturns(result1 pivnet.HelmChartReference, result2 error) {
	fake.DeleteHelmChartReferenceStub = nil
	fake.deleteHelmChartReferenceReturns = struct {
		result1 pivnet.HelmChartReference
		result2 error
	}{result1, result2}
}

func (fake *FakePivnetClient) DeleteHelmChartReferenceReturnsOnCall(i int, result1 pivnet.HelmChartReference, result2 error) {
	fake.DeleteHelmChartReferenceStub = nil
	if fake.deleteHelmChartReferenceReturnsOnCall == nil {
		fake.deleteHelmChartReferenceReturnsOnCall = make(map[int]struct {
			result1 pivnet.HelmChartReference
			result2 error
		})
	}
	fake.deleteHelmChartReferenceReturnsOnCall[i] = struct {
		result1 pivnet.HelmChartReference
		result2 error
	}{result1, result2}
}

func (fake *FakePivnetClient) AddHelmChartReferenceToRelease(productSlug string, helmChartReferenceID int, releaseID int) error {
	fake.addHelmChartReferenceToReleaseMutex.Lock()
	ret, specificReturn := fake.addHelmChartReferenceToReleaseReturnsOnCall[len(fake.addHelmChartReferenceToReleaseArgsForCall)]
	fake.addHelmChartReferenceToReleaseArgsForCall = append(fake.addHelmChartReferenceToReleaseArgsForCall, struct {
		productSlug          string
		helmChartReferenceID int
		releaseID            int
	}{productSlug, helmChartReferenceID, releaseID})
	fake.recordInvocation("AddHelmChartReferenceToRelease", []interface{}{productSlug, helmChartReferenceID, releaseID})
	fake.addHelmChartReferenceToReleaseMutex.Unlock()
	if fake.AddHelmChartReferenceToReleaseStub != nil {
		return fake.AddHelmChartReferenceToReleaseStub(productSlug, helmChartReferenceID, releaseID)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.addHelmChartReferenceToReleaseReturns.result1
}

func (fake *FakePivnetClient) AddHelmChartReferenceToReleaseCallCount() int {
	fake.addHelmChartReferenceToReleaseMutex.RLock()
	defer fake.addHelmChartReferenceToReleaseMutex.RUnlock()
	return len(fake.addHelmChartReferenceToReleaseArgsForCall)
}

func (fake *FakePivnetClient) AddHelmChartReferenceToReleaseArgsForCall(i int) (string, int, int) {
	fake.addHelmChartReferenceToReleaseMutex.RLock()
	defer fake.addHelmChartReferenceToReleaseMutex.RUnlock()
	return fake.addHelmChartReferenceToReleaseArgsForCall[i].productSlug, fake.addHelmChartReferenceToReleaseArgsForCall[i].helmChartReferenceID, fake.addHelmChartReferenceToReleaseArgsForCall[i].releaseID
}

func (fake *FakePivnetClient) AddHelmChartReferenceToReleaseReturns(result1 error) {
	fake.AddHelmChartReferenceToReleaseStub = nil
	fake.addHelmChartReferenceToReleaseReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePivnetClient) AddHelmChartReferenceToReleaseReturnsOnCall(i int, result1 error) {
	fake.AddHelmChartReferenceToReleaseStub = nil
	if fake.addHelmChartReferenceToReleaseReturnsOnCall == nil {
		fake.addHelmChartReferenceToReleaseReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addHelmChartReferenceToReleaseReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePivnetClient) RemoveHelmChartReferenceFromRelease(productSlug string, helmChartReferenceID int, releaseID int) error {
	fake.removeHelmChartReferenceFromReleaseMutex.Lock()
	ret, specificReturn := fake.removeHelmChartReferenceFromReleaseReturnsOnCall[len(fake.removeHelmChartReferenceFromReleaseArgsForCall)]
	fake.removeHelmChartReferenceFromReleaseArgsForCall = append(fake.removeHelmChartReferenceFromReleaseArgsForCall, struct {
		productSlug          string
		helmChartReferenceID int
		releaseID            int
	}{productSlug, helmChartReferenceID, releaseID})
	fake.recordInvocation("RemoveHelmChartReferenceFromRelease", []interface{}{productSlug, helmChartReferenceID, releaseID})
	fake.removeHelmChartReferenceFromReleaseMutex.Unlock()
	if fake.RemoveHelmChartReferenceFromReleaseStub != nil {
		return fake.RemoveHelmChartReferenceFromReleaseStub(productSlug, helmChartReferenceID, releaseID)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.removeHelmChartReferenceFromReleaseReturns.result1
}

func (fake *FakePivnetClient) RemoveHelmChartReferenceFromReleaseCallCount() int {
	fake.removeHelmChartReferenceFromReleaseMutex.RLock()
	defer fake.removeHelmChartReferenceFromReleaseMutex.RUnlock()
	return len(fake.removeHelmChartReferenceFromReleaseArgsForCall)
}

func (fake *FakePivnetClient) RemoveHelmChartReferenceFromReleaseArgsForCall(i int) (string, int, int) {
	fake.removeHelmChartReferenceFromReleaseMutex.RLock()
	defer fake.removeHelmChartReferenceFromReleaseMutex.RUnlock()
	return fake.removeHelmChartReferenceFromReleaseArgsForCall[i].productSlug, fake.removeHelmChartReferenceFromReleaseArgsForCall[i].helmChartReferenceID, fake.removeHelmChartReferenceFromReleaseArgsForCall[i].releaseID
}

func (fake *FakePivnetClient) RemoveHelmChartReferenceFromReleaseReturns(result1 error) {
	fake.RemoveHelmChartReferenceFromReleaseStub = nil
	fake.removeHelmChartReferenceFromReleaseReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePivnetClient) RemoveHelmChartReferenceFromReleaseReturnsOnCall(i int, result1 error) {
	fake.RemoveHelmChartReferenceFromReleaseStub = nil
	if fake.removeHelmChartReferenceFromReleaseReturnsOnCall == nil {
		fake.removeHelmChartReferenceFromReleaseReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeHelmChartReferenceFromReleaseReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePivnetClient) UpdateHelmChartReference(productSlug string, helmChartReference pivnet.HelmChartReference) (pivnet.HelmChartReference, error) {
	fake.updateHelmChartReferenceMutex.Lock()
	ret, specificReturn := fake.updateHelmChartReferenceReturnsOnCall[len(fake.updateHelmChartReferenceArgsForCall)]
	fake.updateHelmChartReferenceArgsForCall = append(fake.updateHelmChartReferenceArgsForCall, struct {
		productSlug        string
		helmChartReference pivnet.HelmChartReference
	}{productSlug, helmChartReference})
	fake.recordInvocation("UpdateHelmChartReference", []interface{}{productSlug, helmChartReference})
	fake.updateHelmChartReferenceMutex.Unlock()
	if fake.UpdateHelmChartReferenceStub != nil {
		return fake.UpdateHelmChartReferenceStub(productSlug, helmChartReference)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.updateHelmChartReferenceReturns.result1, fake.updateHelmChartReferenceReturns.result2
}

func (fake *FakePivnetClient) UpdateHelmChartReferenceCallCount() int {
	fake.updateHelmChartReferenceMutex.RLock()
	defer fake.updateHelmChartReferenceMutex.RUnlock()
	return len(fake.updateHelmChartReferenceArgsForCall)
}

func (fake *FakePivnetClient) UpdateHelmChartReferenceArgsForCall(i int) (string, pivnet.HelmChartReference) {
	fake.updateHelmChartReferenceMutex.RLock()
	defer fake.updateHelmChartReferenceMutex.RUnlock()
	return fake.updateHelmChartReferenceArgsForCall[i].productSlug, fake.updateHelmChartReferenceArgsForCall[i].helmChartReference
}

func (fake *FakePivnetClient) UpdateHelmChartReferenceReturns(result1 pivnet.HelmChartReference, result2 error) {
	fake.UpdateHelmChartReferenceStub = nil
	fake.updateHelmChartReferenceReturns = struct {
		result1 pivnet.HelmChartReference
		result2 error
	}{result1, result2}
}

func (fake *FakePivnetClient) UpdateHelmChartReferenceReturnsOnCall(i int, result1 pivnet.HelmChartReference, result2 error) {
	fake.UpdateHelmChartReferenceStub = nil
	if fake.updateHelmChartReferenceReturnsOnCall == nil {
		fake.updateHelmChartReferenceReturnsOnCall = make(map[int]struct {
			result1 pivnet.HelmChartReference
			result2 error
		})
	}
	fake.updateHelmChartReferenceReturnsOnCall[i] = struct {
		result1 pivnet.HelmChartReference
		result2 error
	}{result1, result2}
}

func (fake *FakePivnetClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.helmChartReferencesMutex.RLock()
	defer fake.helmChartReferencesMutex.RUnlock()
	fake.helmChartReferencesForReleaseMutex.RLock()
	defer fake.helmChartReferencesForReleaseMutex.RUnlock()
	fake.helmChartReferenceMutex.RLock()
	defer fake.helmChartReferenceMutex.RUnlock()
	fake.helmChartReferenceForReleaseMutex.RLock()
	defer fake.helmChartReferenceForReleaseMutex.RUnlock()
	fake.releaseForVersionMutex.RLock()
	defer fake.releaseForVersionMutex.RUnlock()
	fake.createHelmChartReferenceMutex.RLock()
	defer fake.createHelmChartReferenceMutex.RUnlock()
	fake.deleteHelmChartReferenceMutex.RLock()
	defer fake.deleteHelmChartReferenceMutex.RUnlock()
	fake.addHelmChartReferenceToReleaseMutex.RLock()
	defer fake.addHelmChartReferenceToReleaseMutex.RUnlock()
	fake.removeHelmChartReferenceFromReleaseMutex.RLock()
	defer fake.removeHelmChartReferenceFromReleaseMutex.RUnlock()
	fake.updateHelmChartReferenceMutex.RLock()
	defer fake.updateHelmChartReferenceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePivnetClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ helmchartreference.PivnetClient = new(FakePivnetClient)
