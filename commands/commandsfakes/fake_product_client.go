// Code generated by counterfeiter. DO NOT EDIT.
package commandsfakes

import (
	"sync"

	"github.com/pivotal-cf/pivnet-cli/commands"
)

type FakeProductClient struct {
	GetStub        func(string) error
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 string
	}
	getReturns struct {
		result1 error
	}
	getReturnsOnCall map[int]struct {
		result1 error
	}
	ListStub        func() error
	listMutex       sync.RWMutex
	listArgsForCall []struct {
	}
	listReturns struct {
		result1 error
	}
	listReturnsOnCall map[int]struct {
		result1 error
	}
	SlugAliasStub        func(string) error
	slugAliasMutex       sync.RWMutex
	slugAliasArgsForCall []struct {
		arg1 string
	}
	slugAliasReturns struct {
		result1 error
	}
	slugAliasReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeProductClient) Get(arg1 string) error {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Get", []interface{}{arg1})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getReturns
	return fakeReturns.result1
}

func (fake *FakeProductClient) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeProductClient) GetCalls(stub func(string) error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *FakeProductClient) GetArgsForCall(i int) string {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeProductClient) GetReturns(result1 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeProductClient) GetReturnsOnCall(i int, result1 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeProductClient) List() error {
	fake.listMutex.Lock()
	ret, specificReturn := fake.listReturnsOnCall[len(fake.listArgsForCall)]
	fake.listArgsForCall = append(fake.listArgsForCall, struct {
	}{})
	fake.recordInvocation("List", []interface{}{})
	fake.listMutex.Unlock()
	if fake.ListStub != nil {
		return fake.ListStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listReturns
	return fakeReturns.result1
}

func (fake *FakeProductClient) ListCallCount() int {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return len(fake.listArgsForCall)
}

func (fake *FakeProductClient) ListCalls(stub func() error) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = stub
}

func (fake *FakeProductClient) ListReturns(result1 error) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = nil
	fake.listReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeProductClient) ListReturnsOnCall(i int, result1 error) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = nil
	if fake.listReturnsOnCall == nil {
		fake.listReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeProductClient) SlugAlias(arg1 string) error {
	fake.slugAliasMutex.Lock()
	ret, specificReturn := fake.slugAliasReturnsOnCall[len(fake.slugAliasArgsForCall)]
	fake.slugAliasArgsForCall = append(fake.slugAliasArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("SlugAlias", []interface{}{arg1})
	fake.slugAliasMutex.Unlock()
	if fake.SlugAliasStub != nil {
		return fake.SlugAliasStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.slugAliasReturns
	return fakeReturns.result1
}

func (fake *FakeProductClient) SlugAliasCallCount() int {
	fake.slugAliasMutex.RLock()
	defer fake.slugAliasMutex.RUnlock()
	return len(fake.slugAliasArgsForCall)
}

func (fake *FakeProductClient) SlugAliasCalls(stub func(string) error) {
	fake.slugAliasMutex.Lock()
	defer fake.slugAliasMutex.Unlock()
	fake.SlugAliasStub = stub
}

func (fake *FakeProductClient) SlugAliasArgsForCall(i int) string {
	fake.slugAliasMutex.RLock()
	defer fake.slugAliasMutex.RUnlock()
	argsForCall := fake.slugAliasArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeProductClient) SlugAliasReturns(result1 error) {
	fake.slugAliasMutex.Lock()
	defer fake.slugAliasMutex.Unlock()
	fake.SlugAliasStub = nil
	fake.slugAliasReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeProductClient) SlugAliasReturnsOnCall(i int, result1 error) {
	fake.slugAliasMutex.Lock()
	defer fake.slugAliasMutex.Unlock()
	fake.SlugAliasStub = nil
	if fake.slugAliasReturnsOnCall == nil {
		fake.slugAliasReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.slugAliasReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeProductClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	fake.slugAliasMutex.RLock()
	defer fake.slugAliasMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeProductClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ commands.ProductClient = new(FakeProductClient)
